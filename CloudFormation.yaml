AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation for the Custom UI of QBusiness"

Parameters:
  LatestAmiId:
    Description: EC2 machine image
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"
  CertificateARN:
    Description: Certificate that needs to be added to the Load Balancer
    Type: String
    Default: ""
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
    AllowedPattern: ^[a-z0-9]+$
    ConstraintDescription: May only include lowercase, alphanumeric characters
  QApplicationId:
    Type: String
    Description: Q Application Id
  IdcApplicationArn:
    Type: String
    Description: Identity Center customer application ARN.
    Default: ""

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: Please enter VPC CIDR

  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: Please enter CIDR for Public Subnet 1
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: Please enter CIDR for Public Subnet 2


Resources:
  VpcId:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: VpcId

  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VPCFlowLogPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/vpc/flowlogs/*

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VpcId
      ResourceType: VPC
      TrafficType: ALL # We can specify ALL, ACCEPT, or REJECT depending on the traffic to log
      LogDestinationType: cloud-watch-logs # we can choose between cloud-watch-logs or s3
      LogGroupName: !Sub /aws/vpc/flowlogs/${AWS::StackName}
      DeliverLogsPermissionArn: !Sub arn:aws:iam::${AWS::AccountId}:role/vpc-flow-log-role

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: myInternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref VpcId

  myPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myPublicSubnet1

  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myPublicSubnet2

  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: myPrivateSubnet1

# NAT Gateway
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref myPublicSubnet1

      
  # Elastic IP for NAT Gateway
  MyEIP:
    Type: AWS::EC2::EIP

  
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: myPublicRouteTable

  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

# Route Table for Private Subnet
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: myPrivateRouteTable

  myPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet1
      RouteTableId: !Ref myPrivateRouteTable

  myPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet1
      RouteTableId: !Ref myPublicRouteTable

  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet2
      RouteTableId: !Ref myPublicRouteTable



  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
          - EC2_SECURITY_GROUP_INGRESS_OPEN_TO_WORLD_RULE # Internet-facing ALB requires open ingress
          - SECURITY_GROUP_INGRESS_CIDR_NON_32_RULE # ALB accepts traffic from any IP
    Properties:
      GroupDescription: "ELB Security Group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: "HTTPS from Internet"
        

  # InstanceSecurityGroup:
    # Type: AWS::EC2::SecurityGroup
    # Properties:
      # GroupDescription: "Enable application access"
      # VpcId: !Ref VpcId
      # SecurityGroupIngress:
        # - IpProtocol: tcp
          # FromPort: 8501
          # ToPort: 8501
          # SourceSecurityGroupId: !Ref ELBSecurityGroup
          # Description: "Application access from ALB"
      # SecurityGroupEgress:
        # - IpProtocol: tcp
          # FromPort: 443
          # ToPort: 443
          # DestinationSecurityGroupId: !Ref ELBSecurityGroup
          # Description: "Allow outbound HTTPS traffic"

  QManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowQChat
            Effect: Allow
            Action:
              - "qbusiness:ChatSync"
            Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QApplicationId}"

  QServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - sts:AssumeRole
              - sts:SetContext
            Condition:
              ArnEquals:
                "aws:PrincipalArn": !GetAtt EC2ServiceRole.Arn
      Path: /
      ManagedPolicyArns:
        - !Ref QManagedPolicy

  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2ServicePolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      guard:
        SuppressedRules:
          - IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE # CreateTokenWithIAM requires wildcard
    Properties:
      Roles:
        - !Ref EC2ServiceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAssumeQRole
            Effect: Allow
            Action:
              - "sts:AssumeRole"
              - "sts:SetContext"
            Resource: !GetAtt QServiceRole.Arn
          - Sid: AllowTokenExchange
            Effect: Allow
            Action:
              - "sso-oauth:CreateTokenWithIAM"
            Resource: "*"
          - Sid: AllowAppConfig
            Effect: Allow
            Action:
              - "appconfig:StartConfigurationSession"
              - "appconfig:GetLatestConfiguration"
            Resource:
              - !Sub "arn:${AWS::Partition}:appconfig:${AWS::Region}:${AWS::AccountId}:application/${AppConfig}/environment/${AppConfigEnvironment}/configuration/${AppConfigConfigProfile}"

  AppConfig:
    Type: AWS::AppConfig::Application
    Properties:
      Name: !Sub "${AWS::StackName}-appconfig"

  AppConfigEnvironment:
    Type: AWS::AppConfig::Environment
    Properties:
      ApplicationId: !Ref AppConfig
      Name: !Sub "${AWS::StackName}-env"

  AppConfigConfigProfile:
    Type: AWS::AppConfig::ConfigurationProfile
    Properties:
      ApplicationId: !Ref AppConfig
      Name: !Sub "${AWS::StackName}-config"
      LocationUri: "hosted"

  AppConfigConfigVersion:
    Type: AWS::AppConfig::HostedConfigurationVersion
    Properties:
      ApplicationId: !Ref AppConfig
      ConfigurationProfileId: !Ref AppConfigConfigProfile
      ContentType: "application/json"
      Content: !Sub |
        {
          "AmazonQAppId": "${QApplicationId}",
          "IamRoleArn": "${QServiceRole.Arn}",
          "Region": "${AWS::Region}",
          "IdcApplicationArn": "${IdcApplicationArn}",
          "OAuthConfig": {
            "ClientId": "${UserPoolClient}",
            "ExternalDns": "${LowerCaseFqdn.Output}",
            "CognitoDomain" : "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          }
        }
  AppConfigDeployment:
    Type: AWS::AppConfig::Deployment
    Properties:
      ApplicationId: !Ref AppConfig
      ConfigurationProfileId: !Ref AppConfigConfigProfile
      ConfigurationVersion: !GetAtt AppConfigConfigVersion.VersionNumber
      EnvironmentId: !Ref AppConfigEnvironment
      DeploymentStrategyId: !Ref AppConfigDeploymentStrategy

  AppConfigDeploymentStrategy:
    Type: AWS::AppConfig::DeploymentStrategy
    Properties:
      DeploymentDurationInMinutes: 0
      FinalBakeTimeInMinutes: 0
      GrowthFactor: 100
      Name: "Quick deployment"
      ReplicateTo: "NONE"
      GrowthType: "LINEAR"

  ELBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outbound traffic to EC2 Instance
      GroupId: !Ref ELBSecurityGroup
      IpProtocol: "tcp"
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: !Ref InstanceSecurityGroup

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EC2 Security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ELBSecurityGroup
          Description: "Allow inbound traffic from ALB"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "Allow outbound HTTPS traffic"

  # SecurityGroupEgress:
    # Type: AWS::EC2::SecurityGroupEgress
    # Metadata:
      # guard:
        # SuppressedRules:
          # - EC2_SECURITY_GROUP_EGRESS_OPEN_TO_WORLD_RULE
          # - SECURITY_GROUP_EGRESS_ALL_PROTOCOLS_RULE
    # Properties:
      # Description: Allow all outbound traffic
      # GroupId: !Ref InstanceSecurityGroup
      # IpProtocol: "-1"
      # CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2ServiceRole

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: 1
      MinSize: 1
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 180
      VPCZoneIdentifier:
        - !Ref myPrivateSubnet1
        

      LaunchTemplate:
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref LaunchTemplate
      Tags:
        - Key: Name
          Value: Custom Q UI
          PropagateAtLaunch: true

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpTokens: required # This forces the use of IMDSv2
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            SubnetId: !Ref myPrivateSubnet1
            Groups:
              - !Ref InstanceSecurityGroup
        EbsOptimized: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: true
        ImageId: !Ref "LatestAmiId"
        InstanceType: t3.micro
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
              echo "Trying dnf install"
              dnf -y install python3.11 python3.11-pip git
              # Check the exit code of the command
              if [ $? -eq 0 ]; then
                echo "Yum install succeeded"
                success=true
              else
                echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                sleep 3
                ((attempt_num++))
              fi
            done
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
              echo "Trying dnf install"
              dnf -y install https://s3.amazonaws.com/aws-appconfig-downloads/aws-appconfig-agent/linux/x86_64/latest/aws-appconfig-agent.rpm
              # Check the exit code of the command
              if [ $? -eq 0 ]; then
                echo "Yum install succeeded"
                success=true
              else
                echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                sleep 3
                ((attempt_num++))
              fi
            done
            mkdir /etc/systemd/system/aws-appconfig-agent.service.d
            echo "[Service]" > /etc/systemd/system/aws-appconfig-agent.service.d/overrides.conf 
            echo "Environment=SERVICE_REGION=${AWS::Region}" >> /etc/systemd/system/aws-appconfig-agent.service.d/overrides.conf
            systemctl daemon-reload
            systemctl enable aws-appconfig-agent
            systemctl restart aws-appconfig-agent
            cd /opt
            git clone https://github.com/aws-samples/q-business-custom-webapp.git
            cd q-business-custom-webapp/
            pip3.11 install virtualenv
            python3.11 -m virtualenv venv
            venv/bin/pip install -r requirements.txt
            APPCONFIG_APP_NAME=${AppConfig} APPCONFIG_ENV_NAME=${AppConfigEnvironment} APPCONFIG_CONF_NAME=${AppConfigConfigProfile} nohup venv/bin/streamlit run src/app.py --server.port=8080 > logs.txt &

    # Target Group, Listener and Application  Load Balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckProtocol: HTTP
      HealthCheckPort: "8080"
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Sub "${AWS::StackName}-EC2TargetGroup"
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId

  UserPool:
    Type: AWS::Cognito::UserPool
    Metadata:
      guard:
        SuppressedRules:
          - COGNITO_USER_POOL_MFA_CONFIGURATION_RULE # Not required for the demo
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub "https://${LowerCaseFqdn.Output}/component/streamlit_oauth.authorize_button/index.html"
      LogoutURLs:
        - !Sub "https://${LowerCaseFqdn.Output}"

 

  
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub
        - "myuserpool-${UniqueNumber}"
        - UniqueNumber: !Sub
          - "${StackNumber}"
          - StackNumber: !Select [2, !Split ["/", !Ref "AWS::StackId"]]
            
                
  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Metadata:
      guard:
        SuppressedRules:
          - ELBV2_ACM_CERTIFICATE_REQUIRED # Certificate is loaded externally for the workshop
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !Ref CertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
          Order: 1

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "true"  # Ensures ALB drops invalid HTTP headers
      Subnets:
        - !Ref myPublicSubnet1
        - !Ref myPublicSubnet2
      SecurityGroups:
        - !Ref ELBSecurityGroup
        


  LowerCaseFqdn:
    Type: Custom::LowerCaseFqdn
    Properties:
      ServiceToken: !GetAtt LowerCaseFunction.Arn
      Input: !GetAtt ApplicationLoadBalancer.DNSName

  LowerCaseFunction:
    Type: AWS::Lambda::Function
    Metadata:
      guard:
        SuppressedRules:
          - LAMBDA_DLQ_CHECK # This a synchronous call no need for DLQ
          - LAMBDA_INSIDE_VPC # The function doesn't access VPC resources; deploying outside VPC reduces complexity.
          - LAMBDA_CONCURRENCY_CHECK # Not required for the demo
    Properties:
      Handler: index.handler
      Role: !GetAtt LowerCaseRole.Arn
      Code:
        ZipFile: |
          import cfnresponse
          def error_handler(func):
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    logger.error(e)
                    cfnresponse.send(args[0], args[1], cfnresponse.FAILED, {})
                    return None
            return wrapper

          @error_handler
          def handler(event, context):
            if event["RequestType"] in ["Create", "Update"]:
              response = {}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Output": event['ResourceProperties']['Input'].lower()})
            if event["RequestType"] == "Delete":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Runtime: python3.12
      Timeout: 60
      ReservedConcurrentExecutions: 5

  LowerCaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

Outputs:
  URL:
    Description: URL to access the Streamlit APP
    Value: !Sub https://${ApplicationLoadBalancer.DNSName}
  TrustedIssuerUrl:
    Description: Endpoint of the trusted issuer to setup Identity Center
    Value: !GetAtt UserPool.ProviderURL
  Audience:
    Description: Audience to setup customer application in Identity Center
    Value: !Ref UserPoolClient
  RoleArn:
    Description: "ARN of the IAM role required to setup token exchange in Identity Center"
    Value: !GetAtt EC2ServiceRole.Arn
